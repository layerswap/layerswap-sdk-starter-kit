"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationApiResponseProcessor = exports.ApplicationApiRequestFactory = void 0;
const baseapi_1 = require("./baseapi");
const http_1 = require("../http/http");
const ObjectSerializer_1 = require("../models/ObjectSerializer");
const exception_1 = require("./exception");
const util_1 = require("../util");
class ApplicationApiRequestFactory extends baseapi_1.BaseAPIRequestFactory {
    getAppUsageStatsApiV1AppStatsUsageGet(since, until, limit, iterator, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (since === null || since === undefined) {
                throw new baseapi_1.RequiredError('Required parameter since was null or undefined when calling getAppUsageStatsApiV1AppStatsUsageGet.');
            }
            if (until === null || until === undefined) {
                throw new baseapi_1.RequiredError('Required parameter until was null or undefined when calling getAppUsageStatsApiV1AppStatsUsageGet.');
            }
            const localVarPath = '/api/v1/app/stats/usage/';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (since !== undefined) {
                requestContext.setQueryParam("since", ObjectSerializer_1.ObjectSerializer.serialize(since, "Date", "date-time"));
            }
            if (until !== undefined) {
                requestContext.setQueryParam("until", ObjectSerializer_1.ObjectSerializer.serialize(until, "Date", "date-time"));
            }
            if (limit !== undefined) {
                requestContext.setQueryParam("limit", ObjectSerializer_1.ObjectSerializer.serialize(limit, "number", "int"));
            }
            if (iterator !== undefined) {
                requestContext.setQueryParam("iterator", ObjectSerializer_1.ObjectSerializer.serialize(iterator, "string", ""));
            }
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    patchApplication(appId, applicationPatch, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling patchApplication.');
            }
            if (applicationPatch === null || applicationPatch === undefined) {
                throw new baseapi_1.RequiredError('Required parameter applicationPatch was null or undefined when calling patchApplication.');
            }
            const localVarPath = '/api/v1/app/{app_id}/'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            const contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(applicationPatch, "ApplicationPatch", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    v1ApplicationCreate(applicationIn, getIfExists, idempotencyKey, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (applicationIn === null || applicationIn === undefined) {
                throw new baseapi_1.RequiredError('Required parameter applicationIn was null or undefined when calling v1ApplicationCreate.');
            }
            const localVarPath = '/api/v1/app/';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (getIfExists !== undefined) {
                requestContext.setQueryParam("get_if_exists", ObjectSerializer_1.ObjectSerializer.serialize(getIfExists, "boolean", ""));
            }
            if (idempotencyKey !== undefined) {
                requestContext.setHeaderParam("idempotency-key", ObjectSerializer_1.ObjectSerializer.serialize(idempotencyKey, "string", ""));
            }
            const contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(applicationIn, "ApplicationIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    v1ApplicationDelete(appId, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling v1ApplicationDelete.');
            }
            const localVarPath = '/api/v1/app/{app_id}/'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    v1ApplicationGet(appId, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling v1ApplicationGet.');
            }
            const localVarPath = '/api/v1/app/{app_id}/'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    v1ApplicationGetStats(since, until, appId, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (since === null || since === undefined) {
                throw new baseapi_1.RequiredError('Required parameter since was null or undefined when calling v1ApplicationGetStats.');
            }
            if (until === null || until === undefined) {
                throw new baseapi_1.RequiredError('Required parameter until was null or undefined when calling v1ApplicationGetStats.');
            }
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling v1ApplicationGetStats.');
            }
            const localVarPath = '/api/v1/app/{app_id}/stats/'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (since !== undefined) {
                requestContext.setQueryParam("since", ObjectSerializer_1.ObjectSerializer.serialize(since, "Date", "date-time"));
            }
            if (until !== undefined) {
                requestContext.setQueryParam("until", ObjectSerializer_1.ObjectSerializer.serialize(until, "Date", "date-time"));
            }
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    v1ApplicationList(limit, iterator, order, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            const localVarPath = '/api/v1/app/';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            if (limit !== undefined) {
                requestContext.setQueryParam("limit", ObjectSerializer_1.ObjectSerializer.serialize(limit, "number", "uint64"));
            }
            if (iterator !== undefined) {
                requestContext.setQueryParam("iterator", ObjectSerializer_1.ObjectSerializer.serialize(iterator, "string", ""));
            }
            if (order !== undefined) {
                requestContext.setQueryParam("order", ObjectSerializer_1.ObjectSerializer.serialize(order, "Ordering", ""));
            }
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    v1ApplicationUpdate(appId, applicationIn, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling v1ApplicationUpdate.');
            }
            if (applicationIn === null || applicationIn === undefined) {
                throw new baseapi_1.RequiredError('Required parameter applicationIn was null or undefined when calling v1ApplicationUpdate.');
            }
            const localVarPath = '/api/v1/app/{app_id}/'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PUT);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const randomId = Math.floor(Math.random() * Math.pow(2, 32));
            requestContext.setHeaderParam("svix-req-id", randomId.toString());
            const contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(applicationIn, "ApplicationIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
}
exports.ApplicationApiRequestFactory = ApplicationApiRequestFactory;
class ApplicationApiResponseProcessor {
    getAppUsageStatsApiV1AppStatsUsageGet(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ListResponseApplicationStats", "");
                return body;
            }
            if (util_1.isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(400, body);
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (util_1.isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(429, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ListResponseApplicationStats", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    patchApplication(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationOut", "");
                return body;
            }
            if (util_1.isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(400, body);
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (util_1.isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(429, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationOut", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    v1ApplicationCreate(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationOut", "");
                return body;
            }
            if (util_1.isCodeInRange("201", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationOut", "");
                return body;
            }
            if (util_1.isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(400, body);
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (util_1.isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(429, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationOut", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    v1ApplicationDelete(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("204", response.httpStatusCode)) {
                return;
            }
            if (util_1.isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(400, body);
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (util_1.isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(429, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "void", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    v1ApplicationGet(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationOut", "");
                return body;
            }
            if (util_1.isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(400, body);
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (util_1.isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(429, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationOut", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    v1ApplicationGetStats(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationStats", "");
                return body;
            }
            if (util_1.isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(400, body);
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (util_1.isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(429, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationStats", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    v1ApplicationList(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ListResponseApplicationOut", "");
                return body;
            }
            if (util_1.isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(400, body);
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (util_1.isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(429, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ListResponseApplicationOut", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    v1ApplicationUpdate(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationOut", "");
                return body;
            }
            if (util_1.isCodeInRange("201", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationOut", "");
                return body;
            }
            if (util_1.isCodeInRange("400", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(400, body);
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (util_1.isCodeInRange("429", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(429, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ApplicationOut", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
}
exports.ApplicationApiResponseProcessor = ApplicationApiResponseProcessor;
//# sourceMappingURL=ApplicationApi.js.map