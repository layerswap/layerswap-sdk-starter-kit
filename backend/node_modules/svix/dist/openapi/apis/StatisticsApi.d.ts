import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { AppUsageStatsIn } from '../models/AppUsageStatsIn';
import { AppUsageStatsOut } from '../models/AppUsageStatsOut';
import { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';
export declare class StatisticsApiRequestFactory extends BaseAPIRequestFactory {
    calculateAggregateAppStats(appUsageStatsIn: AppUsageStatsIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1StatsAppAttempts(appId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Promise<RequestContext>;
    v1StatsEndpointAttempts(appId: string, endpointId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Promise<RequestContext>;
}
export declare class StatisticsApiResponseProcessor {
    calculateAggregateAppStats(response: ResponseContext): Promise<AppUsageStatsOut>;
    v1StatsAppAttempts(response: ResponseContext): Promise<AttemptStatisticsResponse>;
    v1StatsEndpointAttempts(response: ResponseContext): Promise<AttemptStatisticsResponse>;
}
