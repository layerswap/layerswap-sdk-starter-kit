import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { AppPortalAccessIn } from '../models/AppPortalAccessIn';
import { AppPortalAccessOut } from '../models/AppPortalAccessOut';
import { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';
import { DashboardAccessOut } from '../models/DashboardAccessOut';
import { OneTimeTokenIn } from '../models/OneTimeTokenIn';
import { OneTimeTokenOut } from '../models/OneTimeTokenOut';
export declare class AuthenticationApiRequestFactory extends BaseAPIRequestFactory {
    v1AuthenticationAppPortalAccess(appId: string, appPortalAccessIn: AppPortalAccessIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1AuthenticationDashboardAccess(appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn: OneTimeTokenIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1AuthenticationExpireAll(appId: string, applicationTokenExpireIn: ApplicationTokenExpireIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1AuthenticationLogout(idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class AuthenticationApiResponseProcessor {
    v1AuthenticationAppPortalAccess(response: ResponseContext): Promise<AppPortalAccessOut>;
    v1AuthenticationDashboardAccess(response: ResponseContext): Promise<DashboardAccessOut>;
    v1AuthenticationExchangeOneTimeToken(response: ResponseContext): Promise<OneTimeTokenOut>;
    v1AuthenticationExpireAll(response: ResponseContext): Promise<void>;
    v1AuthenticationLogout(response: ResponseContext): Promise<void>;
}
