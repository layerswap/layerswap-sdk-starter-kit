import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { EndpointHeadersIn } from '../models/EndpointHeadersIn';
import { EndpointHeadersOut } from '../models/EndpointHeadersOut';
import { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';
import { EndpointIn } from '../models/EndpointIn';
import { EndpointOut } from '../models/EndpointOut';
import { EndpointPatch } from '../models/EndpointPatch';
import { EndpointSecretOut } from '../models/EndpointSecretOut';
import { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';
import { EndpointStats } from '../models/EndpointStats';
import { EndpointTransformationIn } from '../models/EndpointTransformationIn';
import { EndpointTransformationOut } from '../models/EndpointTransformationOut';
import { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';
import { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';
import { EndpointUpdate } from '../models/EndpointUpdate';
import { EventExampleIn } from '../models/EventExampleIn';
import { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';
import { MessageOut } from '../models/MessageOut';
import { Ordering } from '../models/Ordering';
import { RecoverIn } from '../models/RecoverIn';
import { RecoverOut } from '../models/RecoverOut';
import { ReplayIn } from '../models/ReplayIn';
import { ReplayOut } from '../models/ReplayOut';
export declare class EndpointApiRequestFactory extends BaseAPIRequestFactory {
    patchEndpoint(appId: string, endpointId: string, endpointPatch: EndpointPatch, _options?: Configuration): Promise<RequestContext>;
    v1EndpointCreate(appId: string, endpointIn: EndpointIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1EndpointDelete(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext>;
    v1EndpointGet(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext>;
    v1EndpointGetHeaders(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext>;
    v1EndpointGetSecret(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext>;
    v1EndpointGetStats(appId: string, endpointId: string, since?: Date, until?: Date, _options?: Configuration): Promise<RequestContext>;
    v1EndpointList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext>;
    v1EndpointPatchHeaders(appId: string, endpointId: string, endpointHeadersPatchIn: EndpointHeadersPatchIn, _options?: Configuration): Promise<RequestContext>;
    v1EndpointRecover(appId: string, endpointId: string, recoverIn: RecoverIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1EndpointReplay(appId: string, endpointId: string, replayIn: ReplayIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1EndpointRotateSecret(appId: string, endpointId: string, endpointSecretRotateIn: EndpointSecretRotateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1EndpointSendExample(appId: string, endpointId: string, eventExampleIn: EventExampleIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1EndpointTransformationGet(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext>;
    v1EndpointTransformationPartialUpdate(appId: string, endpointId: string, endpointTransformationIn: EndpointTransformationIn, _options?: Configuration): Promise<RequestContext>;
    v1EndpointTransformationSimulate(appId: string, endpointId: string, endpointTransformationSimulateIn: EndpointTransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1EndpointUpdate(appId: string, endpointId: string, endpointUpdate: EndpointUpdate, _options?: Configuration): Promise<RequestContext>;
    v1EndpointUpdateHeaders(appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, _options?: Configuration): Promise<RequestContext>;
}
export declare class EndpointApiResponseProcessor {
    patchEndpoint(response: ResponseContext): Promise<EndpointOut>;
    v1EndpointCreate(response: ResponseContext): Promise<EndpointOut>;
    v1EndpointDelete(response: ResponseContext): Promise<void>;
    v1EndpointGet(response: ResponseContext): Promise<EndpointOut>;
    v1EndpointGetHeaders(response: ResponseContext): Promise<EndpointHeadersOut>;
    v1EndpointGetSecret(response: ResponseContext): Promise<EndpointSecretOut>;
    v1EndpointGetStats(response: ResponseContext): Promise<EndpointStats>;
    v1EndpointList(response: ResponseContext): Promise<ListResponseEndpointOut>;
    v1EndpointPatchHeaders(response: ResponseContext): Promise<void>;
    v1EndpointRecover(response: ResponseContext): Promise<RecoverOut>;
    v1EndpointReplay(response: ResponseContext): Promise<ReplayOut>;
    v1EndpointRotateSecret(response: ResponseContext): Promise<void>;
    v1EndpointSendExample(response: ResponseContext): Promise<MessageOut>;
    v1EndpointTransformationGet(response: ResponseContext): Promise<EndpointTransformationOut>;
    v1EndpointTransformationPartialUpdate(response: ResponseContext): Promise<void>;
    v1EndpointTransformationSimulate(response: ResponseContext): Promise<EndpointTransformationSimulateOut>;
    v1EndpointUpdate(response: ResponseContext): Promise<EndpointOut>;
    v1EndpointUpdateHeaders(response: ResponseContext): Promise<void>;
}
