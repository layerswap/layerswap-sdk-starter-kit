import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { IntegrationIn } from '../models/IntegrationIn';
import { IntegrationKeyOut } from '../models/IntegrationKeyOut';
import { IntegrationOut } from '../models/IntegrationOut';
import { IntegrationUpdate } from '../models/IntegrationUpdate';
import { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';
export declare class IntegrationApiRequestFactory extends BaseAPIRequestFactory {
    v1IntegrationCreate(appId: string, integrationIn: IntegrationIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationDelete(appId: string, integId: string, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationGet(appId: string, integId: string, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationGetKey(appId: string, integId: string, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationList(appId: string, limit?: number, iterator?: string, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationRotateKey(appId: string, integId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    v1IntegrationUpdate(appId: string, integId: string, integrationUpdate: IntegrationUpdate, _options?: Configuration): Promise<RequestContext>;
}
export declare class IntegrationApiResponseProcessor {
    v1IntegrationCreate(response: ResponseContext): Promise<IntegrationOut>;
    v1IntegrationDelete(response: ResponseContext): Promise<void>;
    v1IntegrationGet(response: ResponseContext): Promise<IntegrationOut>;
    v1IntegrationGetKey(response: ResponseContext): Promise<IntegrationKeyOut>;
    v1IntegrationList(response: ResponseContext): Promise<ListResponseIntegrationOut>;
    v1IntegrationRotateKey(response: ResponseContext): Promise<IntegrationKeyOut>;
    v1IntegrationUpdate(response: ResponseContext): Promise<IntegrationOut>;
}
